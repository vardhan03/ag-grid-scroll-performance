{"version":3,"sources":["table/ag-grid.table.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MyRenderer","params","style","marginLeft","src","position","top","left","width","value","LinkRenderer","Link","underline","TestAgGrid","useState","rowBuffer","setRowBuffer","isReactUi","setIsReactUi","columnDefs","useMemo","field","cellRendererFramework","defaultColDef","resizable","sortable","rowData","setRowData","useEffect","fetch","then","resp","json","data","height","Button","onClick","prevState","variant","FormControlLabel","control","Checkbox","defaultChecked","onChange","e","target","checked","label","fontWeight","reactUi","className","animateRows","enableRangeSelection","rowSelection","suppressRowClickSelection","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0TAQA,SAASA,EAAWC,GAClB,OACE,uBAAMC,MAAO,CAAEC,WAAY,QAA3B,UACE,qBAAKC,IAAI,kEAAkEF,MAAO,CAACG,SAAU,WAAYC,IAAK,MAAOC,KAAM,MAAOC,MAAO,UACxI,+BAAOP,EAAOQ,WAKrB,SAASC,EAAaT,GAClB,OACI,cAACU,EAAA,EAAD,CAAMC,UAAU,QAAhB,SAAyBX,EAAOQ,QAIzB,SAASI,IAAc,IAAD,EAEDC,mBAAiB,IAFhB,mBAE5BC,EAF4B,KAEjBC,EAFiB,OAGAF,oBAAkB,GAHlB,mBAG5BG,EAH4B,KAGjBC,EAHiB,KAK7BC,EAAaC,mBACjB,iBAAM,CACJ,CAAEC,MAAO,WACT,CAAEA,MAAO,MAAOC,sBAAuBtB,GACvC,CAAEqB,MAAO,UAAWC,sBAAuBZ,GAC3C,CAAEW,MAAO,OAAQC,sBAAuBZ,GACxC,CAAEW,MAAO,QACT,CAAEA,MAAO,SACT,CAAEA,MAAO,QACT,CAAEA,MAAO,UACT,CAAEA,MAAO,UACT,CAAEA,MAAO,YAEX,IAIIE,EAAgBH,mBACpB,iBAAO,CACLI,WAAW,EACXC,UAAU,KAEZ,IA3BiC,EA+BLX,qBA/BK,mBA+B5BY,EA/B4B,KA+BnBC,EA/BmB,KAiCnCC,qBAAU,WACRC,MAAM,+DACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OAAUN,EAAWM,QAC5B,IAcH,OACE,sBAAK/B,MAAO,CAAEgC,OAAQ,QAAS1B,MAAO,QAAtC,UACE,cAAC2B,EAAA,EAAD,CAAQC,QAdY,WACtBpB,GAAa,SAACqB,GAAD,OAAoBA,EAAY,OAaTC,QAAQ,WAA1C,4CADF,YAEE,cAACH,EAAA,EAAD,CAAQC,QAXe,WACzBpB,GAAa,SAACqB,GAAD,OAAoBA,EAAY,OAUNC,QAAQ,WAA7C,6CAFF,YAGE,uBACA,cAACC,EAAA,EAAD,CAAkBC,QAAS,cAACC,EAAA,EAAD,CAAUC,gBAAc,EAACC,SATjC,SAACC,GACtB1B,EAAa0B,EAAEC,OAAOC,YAQ6DC,MAAM,gBACvF,uBAAM7C,MAAO,CAAC8C,WAAY,QAA1B,4BAAmDjC,EAAnD,OACA,uBANF,IAMS,uBANT,IAMe,uBACb,cAAC,cAAD,CACEkC,QAAShC,EACTF,UAAWA,EACXmC,UAAU,kBACVC,aAAa,EACbhC,WAAYA,EACZI,cAAeA,EACf6B,sBAAsB,EACtB1B,QAASA,EACT2B,aAAa,WACbC,2BAA2B,OCjFpBC,MARf,WACE,OACE,qBAAKL,UAAU,MAAf,SACC,cAACrC,EAAD,OCQU2C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a976e92b.chunk.js","sourcesContent":["import { AgGridReact } from 'ag-grid-react'\r\nimport { ICellRendererParams, RowNode } from 'ag-grid-community'\r\nimport 'ag-grid-community/dist/styles/ag-grid.css'\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css'\r\nimport { useEffect, useMemo, useState } from 'react'\r\nimport { Checkbox, FormControlLabel, Link } from '@material-ui/core'\r\nimport { Button } from '@material-ui/core'\r\n\r\nfunction MyRenderer(params: ICellRendererParams) {\r\n  return (\r\n    <span style={{ marginLeft: '20px' }}>\r\n      <img src=\"https://d1yk6z6emsz7qy.cloudfront.net/static/images/loading.gif\" style={{position: 'absolute', top: '0px', left: '0px', width: '40px'}}/> \r\n       <span>{params.value}</span>\r\n    </span>\r\n  )\r\n}\r\n\r\nfunction LinkRenderer(params: ICellRendererParams){\r\n    return (\r\n        <Link underline=\"hover\">{params.value}</Link>\r\n    )\r\n}\r\n\r\nexport default function TestAgGrid() {\r\n\r\n  const [rowBuffer, setRowBuffer] = useState<number>(10)\r\n  const [isReactUi, setIsReactUi ] = useState<boolean>(true)\r\n  // never changes, so we can use useMemo\r\n  const columnDefs = useMemo(\r\n    () => [\r\n      { field: 'athlete' },\r\n      { field: 'age', cellRendererFramework: MyRenderer },\r\n      { field: 'country', cellRendererFramework: LinkRenderer },\r\n      { field: 'year', cellRendererFramework: LinkRenderer },\r\n      { field: 'date' },\r\n      { field: 'sport' },\r\n      { field: 'gold' },\r\n      { field: 'silver' },\r\n      { field: 'bronze' },\r\n      { field: 'total' },\r\n    ],\r\n    []\r\n  )\r\n\r\n  // never changes, so we can use useMemo\r\n  const defaultColDef = useMemo(\r\n    () => ({\r\n      resizable: true,\r\n      sortable: true,\r\n    }),\r\n    []\r\n  )\r\n\r\n  // changes, needs to be state\r\n  const [rowData, setRowData] = useState<RowNode[]>()\r\n\r\n  useEffect(() => {\r\n    fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\r\n      .then((resp) => resp.json())\r\n      .then((data) => setRowData(data))\r\n  }, [])\r\n\r\n  const handleRowBuffer = () => {\r\n    setRowBuffer((prevState: any) => prevState + 10)\r\n  }\r\n\r\n  const handleRowBufferDec = () => {\r\n    setRowBuffer((prevState: any) => prevState - 10)\r\n  }\r\n\r\n  const handleCheckbox = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsReactUi(e.target.checked)\r\n  } \r\n\r\n  return (\r\n    <div style={{ height: '500px', width: '100%' }}>\r\n      <Button onClick={handleRowBuffer} variant=\"outlined\">Increase the row Buffer ( +10)</Button> &nbsp;&nbsp;\r\n      <Button onClick={handleRowBufferDec} variant=\"outlined\"> Decrease the row Buffer ( -10)</Button> &nbsp;&nbsp;\r\n      <br />\r\n      <FormControlLabel control={<Checkbox defaultChecked onChange={handleCheckbox}/>} label=\"Is React UI\"></FormControlLabel>\r\n      <span style={{fontWeight: 'bold'}}> Rowbuffer is: {rowBuffer} </span>\r\n      <br /> <br/> <br/>\r\n      <AgGridReact\r\n        reactUi={isReactUi}\r\n        rowBuffer={rowBuffer}\r\n        className=\"ag-theme-alpine\"\r\n        animateRows={true}\r\n        columnDefs={columnDefs}\r\n        defaultColDef={defaultColDef}\r\n        enableRangeSelection={true}\r\n        rowData={rowData}\r\n        rowSelection=\"multiple\"\r\n        suppressRowClickSelection={true}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import './App.css';\nimport TestAgGrid from './table/ag-grid.table';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <TestAgGrid></TestAgGrid>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}